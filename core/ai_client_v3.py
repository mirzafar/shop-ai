from datetime import timedelta

import ujson
from nltk.stem.snowball import SnowballStemmer
from nltk.tokenize import word_tokenize
from openai import AsyncOpenAI

from core.cache import cache
from core.db import mongo
from settings import settings

client = AsyncOpenAI(
    api_key=settings['ai_api_key']
)


async def http_client(conversations: list) -> str:
    response = await client.chat.completions.create(
        model='gpt-3.5-turbo',
        messages=conversations,
        temperature=0.7,
    )

    return response.choices[0].message.content


async def func_intention(input_text: str, chat_id: str) -> tuple[bool, str]:
    system_message = '''
    –¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã "–ï—Ä–ª–∞–Ω –ï—Ä–∫–µ". –£ –Ω–∞—Å –µ—Å—Ç—å —Ñ–∏–ª–∏–∞–ª—ã:
        ‚Ä¢ –£–ª. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞–µ–≤, 19 (9:00‚Äì21:00, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
        ‚Ä¢ –ü—Ä. –ú–∞–Ω–≥–∏–ª–∏–∫ –ï–ª, 26–ë (9:00‚Äì21:00, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
        ‚Ä¢ –®–æ—Å—Å–µ –ê–ª–∞—à, 34/1 (9:00‚Äì18:00, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
    
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: –ø–æ–∫—É–ø–∫–∞, –≤–æ–∑–≤—Ä–∞—Ç.

    1. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç **–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–≤–∞—Ä**, –∑–∞–≤–µ—Ä—à–∏ –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç:  
       `{"intent": "–ø–æ–∫—É–ø–∫–∞"}`
    
    2. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç **–≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä**, –∑–∞–≤–µ—Ä—à–∏ –¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç:  
       `{"intent": "–≤–æ–∑–≤—Ä–∞—Ç"}`
    
    –í–∞–∂–Ω–æ:
    - –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–∏—á–µ–≥–æ, —Ç–æ–ª—å–∫–æ —É–∑–Ω–∞–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é, –í–µ–∂–ª–∏–≤–æ –≤–µ—Ä–Ω–∏ –∫ —Ç–µ–º–µ –æ–¥–µ–∂–¥—ã.
    - –ù–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∞–¥—Ä–µ—Å–∞/–≥—Ä–∞—Ñ–∏–∫ ‚Äî —Å—Ä–∞–∑—É –¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ.
    - –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ–º–æ–π –æ—Ç–≤–µ—Ç: "–ò–∑–≤–∏–Ω–∏—Ç–µ,  –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥—É –Ω–µ –¥–µ–ª–∞–µ–º, –Ω–æ —è –º–æ–≥—É –≤–∞–º —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ –æ—Ç—á—ë—Ç –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –∫—É—Ä—å–µ—Ä—É. –ö—É—Ä—å–µ—Ä–∞ –≤—ã –¥–æ–ª–∂–Ω—ã —Å–∞–º–∏ –∑–∞–∫–∞–∑–∞—Ç—å ‚ò∫Ô∏è"
    - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º –∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    '''
    conversations = await cache.get(f'chatbot:{chat_id}:conversations')
    if conversations:
        conversations = ujson.loads(conversations)
    else:
        conversations = [
            {'role': 'system', 'content': system_message}
        ]

    conversations.append({'role': 'user', 'content': input_text})
    response_text = await http_client(conversations)
    if response_text:
        try:
            data = ujson.loads(response_text)
            if data.get('intent'):
                return True, data['intent']
        except (Exception,):
            pass

    await cache.set(f'chatbot:{chat_id}:conversations', ujson.dumps(conversations), ex=timedelta(minutes=5))
    return False, response_text


async def func_sell(input_text: str | None, chat_id: str):
    system_message = '''
        –¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã "–ï—Ä–ª–∞–Ω –ï—Ä–∫–µ". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å–Ω–∏—Ü–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä, –æ–ø—Ä–µ–¥–µ–ª–∏–≤ —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
        ‚Äì –≤–∏–¥ –æ–¥–µ–∂–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–ª–∞—Ç—å–µ, –±–ª—É–∑–∫–∞, –±—Ä—é–∫–∏ –∏ —Ç.–¥.),
        ‚Äì —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–Ω–∞–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–≤, —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ, –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç–µ),
        ‚Äì —Ü–≤–µ—Ç.
        
        –ö–æ–≥–¥–∞ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã ‚Äî –≤—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤:
        `{"category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–µ–∂–¥—ã", "size": "—Ä–∞–∑–º–µ—Ä", "color": "—Ü–≤–µ—Ç"}`
        
        –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ JSON ‚Äî —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∏ –¥–∏–∞–ª–æ–≥, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏ (–Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ—â–∞–Ω–∏–π, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏).
        
        –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –µ—Å—Ç—å, —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏ –µ—ë –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

        –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ñ–∏–ª–∏–∞–ª—ã:
        ‚Äì –£–ª. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞–µ–≤, 19 (9:00‚Äì21:00, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
        ‚Äì –ü—Ä. –ú–∞–Ω–≥–∏–ª–∏–∫ –ï–ª, 26–ë (9:00‚Äì21:00, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
        ‚Äì –®–æ—Å—Å–µ –ê–ª–∞—à, 34/1 (9:00‚Äì18:00, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
        
        –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É, —Å–∫–∞–∂–∏:
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥—É –Ω–µ –¥–µ–ª–∞–µ–º, –Ω–æ —è –º–æ–≥—É –≤–∞–º —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ –æ—Ç—á—ë—Ç –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –∫—É—Ä—å–µ—Ä—É. –ö—É—Ä—å–µ—Ä–∞ –≤—ã –¥–æ–ª–∂–Ω—ã —Å–∞–º–∏ –∑–∞–∫–∞–∑–∞—Ç—å ‚ò∫Ô∏è"
        
        –î–∏–∞–ª–æ–≥ –Ω–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å –≤—ã–±–æ—Ä–∞ –æ–¥–µ–∂–¥—ã –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ù–µ –æ–±—Å—É–∂–¥–∞–π –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî —É—Ç–æ—á–Ω–∏.
        '''
    conversations = await cache.get(f'chatbot:{chat_id}:conversations')
    if conversations:
        conversations = ujson.loads(conversations)
    else:
        conversations = [
            {'role': 'system', 'content': system_message}
        ]

    if input_text:
        conversations.append({'role': 'user', 'content': input_text})

    response_text = await http_client(conversations)
    conversations.append({'role': 'assistant', 'content': response_text})
    await cache.set(f'chatbot:{chat_id}:conversations', ujson.dumps(conversations), ex=timedelta(minutes=5))

    try:
        data = ujson.loads(response_text)
        flag, _ids = await found_goods(data)
        if flag is False:
            conversations.append({'role': 'system', 'content': '''
            –í –±–∞–∑–µ —Å —Ç–∞–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏:
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–∏–¥ –æ–¥–µ–∂–¥—ã, —Ä–∞–∑–º–µ—Ä –∏ —Ü–≤–µ—Ç."
            
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
            ‚Äì –≤–∏–¥ –æ–¥–µ–∂–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–ª–∞—Ç—å–µ, –±–ª—É–∑–∫–∞, –±—Ä—é–∫–∏ –∏ —Ç.–¥.),
            ‚Äì —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–Ω–∞–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–≤, —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ, –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç–µ),
            ‚Äì —Ü–≤–µ—Ç.
            
            –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –≤—ã–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            `{"category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–µ–∂–¥—ã", "size": "—Ä–∞–∑–º–µ—Ä", "color": "—Ü–≤–µ—Ç"}`
            '''})

            return await func_sell(None, chat_id)

        await mongo.orders.insert_one({
            'good_ids': _ids,
            **data
        })
        return True, data
    except (Exception,):
        pass

    return False, response_text


async def func_refund(input_text: str) -> str:
    pass


async def clear_chat(uid: str):
    await cache.delete(
        f'chatbot:{uid}:conversations',
        f'chatbot:{uid}:level',
        f'chatbot:{uid}:intent',
        f'chatbot:{uid}:configs'
    )


stemmer = SnowballStemmer("russian")


async def found_goods(configs: dict) -> tuple[bool, list]:
    tokens = word_tokenize(configs['category'])
    filters = []
    for word in tokens:
        filters.append({'words': stemmer.stem(word)})

    g_filter = {}
    if configs.get('size'):
        g_filter['size'] = configs['size']

    f_colors = []
    if configs.get('color'):
        t_colors = word_tokenize(configs['color'])
        for word in t_colors:
            f_colors.append({'f_colors': stemmer.stem(word)})

    g_filter.update({
        '$and': filters + f_colors,
        'size': configs['size']
    })

    good = await mongo.goods.find_one(g_filter)
    if good:
        return True, [str(good['_id'])]

    goods = await mongo.goods.find({'$and': filters}).to_list(length=None)
    if goods:
        return True, [str(x['_id']) for x in goods[:5]]
    else:
        return False, []


async def on_messages(input_text: str, chat_id: str) -> str:
    if input_text in ['stoop']:
        await clear_chat(chat_id)
        return input_text

    level = int(await cache.get(f'chatbot:{chat_id}:level') or 1)
    if level == 1:
        success, text = await func_intention(input_text, chat_id)
        if success is False:
            return text

        text = text.strip().lower()
        if text == '–≤–æ–∑–≤—Ä–∞—Ç':
            level = 3
            await cache.set(f'chatbot:{chat_id}:intent', 'refund')
        elif text == '–ø–æ–∫—É–ø–∫–∞':
            level = 2
            await cache.set(f'chatbot:{chat_id}:intent', 'sell')
        else:
            await clear_chat(chat_id)
            return '–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ –ø–æ—à–µ–ª –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–∞–≤–æ'

        await cache.delete(f'chatbot:{chat_id}:conversations')
        await cache.set(f'chatbot:{chat_id}:level', level, ex=timedelta(minutes=5))
        input_text = None

    if level == 2:
        success, resp = await func_sell(input_text, chat_id)
        if success is False:
            return resp

        await clear_chat(chat_id)
        await cache.set(f'chatbot:{chat_id}:configs', ujson.dumps(resp))
        return '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.'

    if level == 3:
        await func_refund(input_text)
